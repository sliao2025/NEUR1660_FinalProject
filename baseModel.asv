clearvars 

%% Task Parameters
runs = 100; %how many times it will go through each trial block

num_blocks = 3;
low_rewards = [5 10 20]; %possible rewards in the low reward block
high_rewards = [20 40 80]; %possible rewards in the high reward block
mixed_rewards = [5 10 20 40 80]; %possible rewards in the mixed block

num_trials = 40;

all_rewards = nan(num_blocks, num_trials, runs); %record of all of the rewards that the animal received (columns are trials, rows are blocks, frames are runs)
initiation_times = nan(num_blocks, num_trials, runs); % initiation times

trial_initiation_times = nan(1,num_blocks*num_trials*runs);
trial_rewards = nan(1,num_blocks*num_trials*runs);
state_order = [];
RPE_first_ten = nan(num_blocks,10, runs); %reward prediction errors for the first 10 trials of every block
beliefs_first_ten = zeros(num_blocks,11, runs, num_blocks); %record the beliefs for the firs 10 trials of every block and the one trial before them (bc we're gonna calc the change later)
beliefs_first_ten(1,1,1) = 1;

opt_out = nan; %this will change once we have the model

%% Model Parameters

state_neurons = rand(3,1)/10; %initialize the initial state values between 0-0.1
synaptic_lr = 0.3;
state_lr = 0.15;
D = 0.1; %Scale factor for initiation times

%% Runs
weight_matrix = rand(3,1);
epsilon = 1e-3; % to avoid division by zero

trial_counter = 1;

for run = 1:runs
    block_order = randperm(3); %the order that blocks will be presented in for this run 

    for b = 1:length(block_order)
        possible_rewards = [];
        state_one_hot = zeros(3,1);
        state_idx = 0;
        if block_order(b) == 1 %if the bth block is 1, the possible rewards are the low value ones
            possible_rewards = low_rewards;
            state_one_hot(1) = 1;
            state_idx = 1;
        elseif block_order(b) == 2 %if the bth block is 2, the possible rewards are the high value ones
            possible_rewards = high_rewards;
            state_one_hot(2) = 1;
            state_idx = 2;
        elseif block_order(b) == 3 %if the bth block is 3, the possible rewards are the mixed value ones
            possible_rewards = mixed_rewards;
            state_one_hot(3) = 1;
            state_idx = 3;
        end

        for t = 1:num_trials
            reward_index = randi(length(possible_rewards), 1);
            trial_reward_offer = possible_rewards(reward_index)/80; %the reward that could be represented on this trial
            
            %updating weights and state values
            output_act = (weight_matrix)'*state_neurons; %should be 1x1
            output_act = max(output_act,0);
            RPE = trial_reward_offer - output_act;
            allRPES(trial_counter) = RPE;

            weight_matrix = weight_matrix.*(1-synaptic_lr) + (synaptic_lr * RPE * state_one_hot); %existing weights + weight update
            state_neurons(state_idx) = state_neurons(state_idx)*(1-state_lr) + state_lr*RPE; %existing state + state update

            % Compute and store initiation time (higher activation = faster initiation)
            initiation_time = D / (output_act + epsilon);
            initiation_times_raw(trial_counter) = initiation_time;
            initiation_times(block_order(b), t, run) = initiation_time;
            trial_initiation_times(trial_counter) = initiation_time;
            trial_rewards(trial_counter) = trial_reward_offer;

            if t == 40
                state_order(end+1) = block_order(b);
            end

           if t < 11 | t == 40
                if t<11
                    RPE_first_ten(b, t, run) = RPE;
                    belief = block_order(b);
                    beliefs_first_ten(b,t+1,run, belief) = 1;
                elseif t == 40 && ~(run ==runs && b == num_blocks)
                    if b == 3
                        belief = block_order(b);
                        beliefs_first_ten(1,1,run+1,belief) = 1;
                    elseif b ~= 3
                        belief = block_order(b);
                        beliefs_first_ten(b+1,1,run, belief) = 1;
                    end
                end
            end


            reward_withheld = randsample(2, 1, true, [85 15]); %decide if this will be a trial where the reward will be withheld (15% of the time) (2 means it is a withholding trial)
            % if reward_withheld == 2 %if this is a withholding trial, no reward is received
            %     trial_reward = 0;
            % end
            % if opt_out == 1 %if the model opts out no reward is received
            %     trial_reward = 0;
            % end
            % if opt_out == 0
            %     trial_reward = trial_reward_offer;
            % end
            all_rewards(block_order(b), t, run) = trial_reward_offer; %this is set up so that the row (block index) is constant despite the fact that the order of the blocks is changing (so the first row will always be low reward, second high, and third mixed)
            trial_counter = trial_counter+1;
        end
    end
end

%% Plot Initiation Times
figure;
hold on;
colors = lines(num_blocks);
labels = {'Low Reward Block', 'High Reward Block', 'Mixed Reward Block'};

for block = 1:num_blocks
    avg_initiation = squeeze(mean(initiation_times(block, :, :), 3)); % avg across runs
    plot(avg_initiation, 'LineWidth', 2, 'Color', colors(block,:));
end

xlabel('Trial');
ylabel('Initiation Time');
legend(labels);
title('Average Initiation Time Across Trials Per Block');
grid on;

%% Calculate the Mean Initiation Time Per Block Type
% For each block, average initiation time across all trials and runs
mean_initiation_time = squeeze(mean(mean(initiation_times, 2), 3));

%% Plot the Mean Initiation Times Per Block as Dots with Custom Colors
figure;
hold on;
plot(1, mean_initiation_time(1), 'o', 'Color', 'b', 'MarkerFaceColor', 'b', 'MarkerSize', 10);
plot(2, mean_initiation_time(3), 'o', 'Color', [0.5 0.5 0.5], 'MarkerFaceColor', [0.5 0.5 0.5], 'MarkerSize', 10);
plot(3, mean_initiation_time(2), 'o', 'Color', 'r', 'MarkerFaceColor', 'r', 'MarkerSize', 10);


% Set x-axis tick labels corresponding to the block types
set(gca, 'XTick', 1:3, 'XTickLabel', {'Low Reward Block', 'Mixed Reward Block', 'High Reward Block'});
xlabel('Block Type');
ylabel('Mean Initiation Time');
title('Mean Initiation Time per Block Type');
grid on;

%% Plot the trial initiation time as a function of trial from block switch (figure 2A)

%get the variables
switch_trials = num_trials:num_trials:size(trial_initiation_times,2);
switch_trials = switch_trials+1;
switch_trials = switch_trials(1:end-1);
lowtomixed = [];
hightomixed = [];
for s = 1:length(switch_trials)
    thirtybefore = switch_trials(s) - 30; 
    fourtyafter = switch_trials(s) + (40-1);
    if state_order(s) == 1 &&  state_order(s+1)== 3
        lowtomixed(end+1,:) = trial_initiation_times(thirtybefore:fourtyafter);
    elseif state_order(s) == 2 &&  state_order(s+1)== 3
        hightomixed(end+1,:) = trial_initiation_times(thirtybefore:fourtyafter);
    end
end
mean_lowtomixed = mean(lowtomixed,1);
mean_hightomixed = mean(hightomixed,1);

%getting the zscore version
meanofmean_lowtomixed = mean(mean_lowtomixed);
meanofmean_hightomixed = mean(mean_hightomixed);
std_lowtomixed = std(mean_lowtomixed);
std_hightoixed = std(mean_hightomixed);
z_lowtomixed = mean
z_hightomixed = 

%plot
figure;
hold on;
plot(-30:39, mean_lowtomixed, 'Color', 'b', 'LineWidth', 2);
plot(-30:39, mean_hightomixed, 'Color', 'r', 'LineWidth', 2);
xlabel('Trial fromm Block Switch');
ylabel('Trial Initiation Time');
hold off;


%plot wih "causal filter" (what they did in the paper)
windowSize = 10;
filteredmeanlowtomixed= nan(size(mean_lowtomixed));
filteredmeanhightomixed = nan(size(mean_hightomixed));
for n = windowSize:length(mean_lowtomixed)
    filteredmeanlowtomixed(n) = mean(mean_lowtomixed(n-windowSize+1:n));
    filteredmeanhightomixed(n) = mean(mean_hightomixed(n-windowSize+1:n));
end
figure;
hold on;
plot(-30:39, filteredmeanlowtomixed, 'Color', 'b', 'LineWidth', 2);
plot(-30:39, filteredmeanhightomixed, 'Color', 'r', 'LineWidth', 2);
xlabel('Trial from Block Switch');
xlim([-20 40]);
ylabel('Trial Initiation Time');
title('with 10 trial filter')
hold off;

%% Initiation times as a function of RPE sign (this kinda just isnt a thing for the base model since the belief difference is binary?)

% dBelief = diff(beliefs_first_ten,1,2);      % → 3 × 9 × 5 × 3
% dBelief = (-1)*(dBelief);
% % 2) Euclidean norm of each 3‑vector  (operate along the 4th dim!)
% delta = vecnorm(dBelief,2,4);              % → 3 × 9 × 5
% 
% belief_change_first_ten = nan(3,11,runs);     % pre‑fill
% belief_change_first_ten(:,2:end,:) = delta;

euclidean_dists_backward = nan(num_blocks, 10, runs);
for b = 1:num_blocks
    for run = 1:runs
        for t = 2:11  % from time 2 to 11 (trial 1 to 10)
            % Backward difference: current trial vs previous
            belief_t = squeeze(beliefs_first_ten(b, t, run, :));
            belief_prev = squeeze(beliefs_first_ten(b, t-1, run, :));

            % Compute Euclidean distance
            euclidean_dists_backward(b, t-1, run) = norm(belief_t - belief_prev);
        end
    end
end

median_belief_change = median(euclidean_dists_backward, "all");


low_belief_change = nan(10*num_blocks*runs,2);
high_belief_change = nan(10*num_blocks*runs,2);
count = 1;

for run = 1:runs
    for b = 1:num_blocks
        for t = 1:10
            % trial = run*num_blocks*num_trials - (num_blocks-b)*num_trials - num_trials + t;
            trial = (run - 1)*num_blocks*num_trials + (b - 1)*num_trials + t;
            if trial>1
                if euclidean_dists_backward(b,t,run,:) < median_belief_change
                    if RPE_first_ten(b,t,run) < 0
                        low_belief_change(count,1) = trial_initiation_times(trial) - trial_initiation_times(trial - 1); 
                    elseif RPE_first_ten(b,t,run) > 0
                        low_belief_change(count,2) = trial_initiation_times(trial) - trial_initiation_times(trial - 1);
                    end
                elseif euclidean_dists_backward(b,t,run,:) > median_belief_change
                    if RPE_first_ten(b,t,run) < 0
                        high_belief_change(count,1) = trial_initiation_times(trial) - trial_initiation_times(trial - 1);
                    elseif RPE_first_ten(b,t,run) > 0
                        high_belief_change(count,2) = trial_initiation_times(trial) - trial_initiation_times(trial - 1);
                    end
                end
            end
            count = count + 1;
        end
    end
end

mean_lowbeliefchange = mean(low_belief_change, 1, 'omitnan');
mean_highbeliefchange = mean(high_belief_change, 1, 'omitnan');


%now plot
figure;
hold on;
plot([1 2], mean_lowbeliefchange.*10, 'Color', 'b', 'LineWidth', 2, 'DisplayName', 'Low Change in Belief');
plot([1 2], mean_highbeliefchange.*10, 'Color', 'r', 'LineWidth', 2, 'DisplayName', 'High Change in Belief');
legend('show');
ylabel('Change in Initiation Time (x10^-1)');
xlim([0 3]);
xticks([1 2]);
xticklabels({'RPE<0', 'RPE>0'});
hold off;

 %% checking why the above doesnt work
% 
% rpe_negative_mask = RPE_first_ten < 0;
% 
% % Step 2: Extract the corresponding belief changes for these trials
% belief_change_for_rpe_negative = belief_change_first_ten(rpe_negative_mask);
% 
% % Step 3: Check if all belief change values are 0
% all_belief_zero_for_rpe_negative = all(belief_change_for_rpe_negative == 0);
% 
% if all_belief_zero_for_rpe_negative
%     disp('All trials where RPE < 0 have a belief change of 0.');
% else
%     disp('Not all trials where RPE < 0 have a belief change of 0.');
% end
% 
% % Step 5: Check if there are any trials where RPE < 0 and belief change is high or low
% high_belief_mask = belief_change_for_rpe_negative > median_belief_change;
% low_belief_mask = belief_change_for_rpe_negative < median_belief_change;
% 
% % Step 6: Display results
% if sum(high_belief_mask,"all") ~= 0
%     disp('There are trials where RPE < 0 and belief change is high.');
% else
%     disp('There are no trials where RPE < 0 and belief change is high.');
% end
% 
% if sum(low_belief_mask, "all") ~= 0 
%     disp('There are trials where RPE < 0 and belief change is low.');
% else
%     disp('There are no trials where RPE < 0 and belief change is low.');
% end
% 
% %% Plotting RPE Distribution
% %% 1) Histogram of *all* RPEs across every trial
% figure;
% histogram(allRPES, 30, 'Normalization','pdf');    % 30 bins, normalized to probability density
% xlabel('Reward Prediction Error (RPE)');
% ylabel('Probability Density');
% title('Distribution of RPE Across All Trials');
% grid on;
% 
% %% 2) Histogram of RPEs just for the *first ten* trials of each block
% figure;
% histogram(RPE_first_ten(:), 20);                  % 20 bins, raw counts
% xlabel('RPE (first 10 trials of each block)');
% ylabel('Count');
% title('RPE Distribution in the First Ten Trials');
% grid on;
